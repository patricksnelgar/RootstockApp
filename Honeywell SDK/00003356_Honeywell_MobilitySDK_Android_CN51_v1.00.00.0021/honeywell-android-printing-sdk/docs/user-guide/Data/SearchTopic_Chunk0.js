define({"0":{i:0.0285854422911452,u:"../Content/Honeywell Mobility Android Printing Java API Guide.htm",a:"The Honeywell Mobility Android Printing Java API allows applications to print from a Honeywell Android computer to a Honeywell receipt or label printer. Honeywell Printing Java API Reference Printer Commands and Attributes User Guide The Java classes support these features: Communication with the ...",t:"Honeywell Mobility Android Printing Java API Guide"},"1":{i:0.034270299892179,u:"../Content/Basic Steps for Printing a Receipt.htm",a:"In the Java Printing library, the LinePrinter class represents a mobile receipt printer and provides methods to communicate with the printer. To print a receipt, the application needs to perform the following steps: Create an AsyncTask or a thread to invoke the printing API. Android OS displays the ...",t:"Basic Steps for Printing a Receipt"},"2":{i:0.0285854422911452,u:"../Content/Basic Steps for Printing a Label.htm",a:"In the Java Printing library, the LabelPrinter class represents a label printer and provides methods to communicate with the printer. To print a label, the application needs to perform the following steps: Create an AsyncTask or a thread to invoke the printing API. Android OS displays the ...",t:"Basic Steps for Printing a Label"},"3":{i:0.0369115065466602,u:"../Content/Create Printer Settings.htm",a:"The Printing Java API uses commands and attributes to control the data output for a specific printer model. Command and attribute settings define everything from escape character sequences to timing delays the printer needs to function correctly. The printer commands and attributes are defined in ...",t:"Create Printer Settings"},"4":{i:0.0369115065466602,u:"../Content/About the Constructors.htm",a:"The Printing Java API provides two key classes, LabelPrinter and LinePrinter, for label printing and receipt printing respectively. The LabelPrinter and LinePrinter constructors are defined as: public LabelPrinter(String aCmdAttribFilePath, String aPrinterID,\n    String aPrinterURI, ...",t:"About the Constructors"},"5":{i:0.0369115065466602,u:"../Content/Register Event Listeners.htm",a:"Print Progress Event Listener The application may register an event listener to receive the progress information during printing. The print progress events inform the application when printing is started and when printing is completed. The LabelPrinter and LinePrinter classes provide the following ...",t:"Register Event Listeners"},"6":{i:0.0369115065466602,u:"../Content/Connect to the Printer.htm",a:"The LabelPrinter and LinePrinter classes inherit the connect method from the parent class, Printer. The application must call the connect method to connect to the printer before invoking other methods to interact with the printer; otherwise, an exception is thrown. The connect method uses the ...",t:"Connect to the Printer"},"7":{i:0.0285854422911452,u:"../Content/Query Printer Status.htm",a:"You may check the printer status before printing. If the returned status indicate one or more error conditions, you may prompt the user to correct the errors. The LabelPrinter and LinePrinter classes inherit the getStatus method from its parent class. public int[] getStatus() throws PrinterException ...",t:"Query Printer Status"},"8":{i:0.0334403906744968,u:"../Content/Generate a Receipt.htm",a:"Generate a Receipt After you have followed Steps 1 through 5 of  Basic Steps for Printing a Receipt , you can generate the receipt as follows: Change the font text style  if desired. Write text to the printer and position the printhead . Print  bar codes  or  bitmap files  if desired.",t:"Generate a Receipt"},"9":{i:0.034270299892179,u:"../Content/Change the Font Text Style.htm",a:"You may change the text styles within your receipt. The LinePrinter class gets information about the printer functions from the commands and attributes file specified in the LinePrinter constructor. If the loaded printer settings do not contain information on how to perform a font style command, the ...",t:"Change the Font Text Style"},"10":{i:0.034270299892179,u:"../Content/Write Text to the Printer and Position the Printhead.htm",a:"The LinePrinter class supports these methods to write text to the printer and position the printhead: public void write(byte[] bytes) throws LinePrinterException public void write(String aStr) throws LinePrinterException public void writeLine(String aStr) throws LinePrinterException public void ...",t:"Write Text to the Printer and Position the Printhead"},"11":{i:0.034270299892179,u:"../Content/Print Bar Codes.htm",a:"The LinePrinter class supports the following method to print bar codes: public void writeBarcode(int aSymbology, String aData, int aSize, int aXOffset) throws LinePrinterException The aSymbology parameter selects the bar code symbology to be printed. The aData parameter is a string specifying the ...",t:"Print Bar Codes"},"12":{i:0.034270299892179,u:"../Content/Print Bitmap Files.htm",a:"The LinePrinter class supports these methods to print bitmap images: public void writeGraphic(String aGraphicFilePath, int aRotation, aXOffset, aWidth, aHeight)\n throws LinePrinterException\n public void writeGraphicBase64(String aBase64Image, int aRotation,   int aXOffset, int aWidth, int aHeight) ...",t:"Print Bitmap Files"},"13":{i:0.0285854422911452,u:"../Content/Create and Print a Label.htm",a:"Create and Print a Label Before you can print a label, the label definition must be defined in the JSON printer settings specified in the LabelPrinter constructor. Follow the steps below to create and print a label. Create a label definition . Print a label .",t:"Create and Print a Label"},"14":{i:0.0755800728848506,u:"../Content/Create Label Definitions.htm",a:"The Printing Java API supports label printing through a string of printer commands or by invoking a stored format on the printer. The label definitions are defined in groups in the LABELS member of the printer commands and attributes LINEPRINTERCONTROL JSON object. Each label group is an object ...",t:"Create Label Definitions"},"15":{i:0.108446314908758,u:"../Content/Print a Label.htm",a:"The LabelPrinter class supports the writeLabel method for printing a label. public void writeLabel(String aFormat,     LabelPrinter.VarDictionary aDictionary) throws LabelPrinterException The aFormat parameter specifies an identifier to locate a label definition in the printer settings specified in ...",t:"Print a Label"},"16":{i:0.169355208717392,u:"../Content/Example Printer Commands and Attributes for Label Printing.htm",a:"{     \"LINEPRINTERCONTROL\":     {         \"FormatVersion\": \"1.0.0.0\",         \"Platform\": \"Android\",         \"DEFAULTS\":         {             \"BoldIsFont\": true, \"BoldOff\": \"[0x1b,0x77,!]\", \"BoldOn\": \"[0x1b,0x77,0x6D]\",             \"CompressDotsHigh\": 12, \"CompressIsFont\": true, \"CompressOff\": ...",t:"Example Printer Commands and Attributes for Label Printing"},"17":{i:0.0285854422911452,u:"../Content/Example_1_Send the Label Data Stream.htm",a:"Print the ItemLabel defined in the  Example Printer Commands and Attributes for Label Printing  to a PB32 printer. The label uses the PB32_Fingerprint printer settings which include the 3in_FingerprintLabels label group. The label group is defined by ItemLabel as follows: \"ItemLabel\": {     ...",t:"Example 1: Send the Label Data Stream to the Printer"},"18":{i:0.0285854422911452,u:"../Content/Example_2_Save and Invoke a Stored Label.htm",a:"Print the URL_QRLabel defined in the  Example Printer Commands and Attributes for Label Printing  to a PB32 printer. It uses the PB32_Fingerprint printer settings which include the 3in_FingerprintLabels label group. The following code snippet shows the URL_QRLabel definition in this group:     ...",t:"Example 2: Save and Invoke a Stored Label Format on the Printer"},"19":{i:0.0369115065466602,u:"../Content/Disconnect From the Printer and Release Resources.htm",a:"The LabelPrinter and LinePrinter classes inherit the disconnect and close methods from the parent class, Printer. After the printing is done, the application may call the disconnect method to disconnect the printer connection. If the application calls any method to interact with the printer without ...",t:"Disconnect From the Printer and Release Resources"},"20":{i:0.0285854422911452,u:"../Content/Events.htm",a:"Print Progress Event This event is fired by the LinePrinter or LabelPrinter class during printing to inform the application when printing starts and when printing is complete. The LabelPrinter and LinePrinter classes inherit the addPrintProgressListener method from the parent class, Printer. The ...",t:"Events"},"21":{i:0.0285854422911452,u:"../Content/Exceptions.htm",a:"Printer methods throw a PrinterException. You may use PrinterException to catch either LinePrinterException or LabelPrinterException. For backwards compatibility, you may continue to use LinePrinterException to catch exceptions from LinePrinter methods, including those exceptions inherited from ...",t:"Exceptions"},"22":{i:0.0285854422911452,u:"../Content/Developer Resources and Support.htm",a:"If you need assistance installing or troubleshooting your product, contact us by using one of these methods: Knowledge Base: www.hsmknowledgebase.com Our Knowledge Base provides thousands of immediate solutions. If the Knowledge Base cannot help, our Technical Support Portal provides an easy way to ...",t:"Developer Resources and Support"},});